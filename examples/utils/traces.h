#ifndef __TRACES_H__
#define __TRACES_H__
#include <iostream>
#include "ed247.h"

// Version generated by CMake
extern const char* VERSION;

// __FILE_NAME__ is defined only in recent gcc/clang
#ifndef __FILE_NAME__
# include <string.h>
# define __FILE_NAME__ (strrchr("/" __FILE__, '/') + 1)
#endif

#define LOG_BOOLALPHA() std::cerr << std::boolalpha

// Logging functions
#define SAY(m) std::cerr << m << std::endl;
#define LOG(m) SAY(__FILE_NAME__ << ':' << __LINE__ << ": " << m)

// Assert/failure
#define ASSERT(m) do               \
{                                  \
  if (!(m)) {                      \
    LOG("Assertion failed: " #m);  \
    LOG("Aborting.");              \
    abort();                       \
  }                                \
} while (0)

#define FAIL(m) do                 \
{                                  \
  SAY(m);                          \
  LOG("Aborting.");                \
  abort();                         \
} while (0)


// Helper to convert a payload to hexa stream:
// SAY("data: " << hex_stream(data, 4));
class hex_stream
{
public:
  hex_stream(const void* payload, int len): _payload((const uint8_t*)payload), _len(len) {}
  friend std::ostream& operator<<(std::ostream& stream, const hex_stream&);
private:
  const uint8_t* _payload;
  int            _len;
};


// Helper to convert a payload to binary stream:
// SAY("data: " << bin_stream(data, 4));
class bin_stream
{
public:
  bin_stream(const void* payload, int len): _payload((const uint8_t*)payload), _len(len) {}
  friend std::ostream& operator<<(std::ostream& stream, const bin_stream&);
private:
  const uint8_t* _payload;
  int            _len;
};

// Log an ED247 timestamp
std::ostream& operator<<(std::ostream& stream, const ed247_timestamp_t* ts);

#endif
