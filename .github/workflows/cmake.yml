name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_SAMPLES: ON
  BUILD_TESTS: ON

jobs:
  build_ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        build_type: [Release, Debug]
    
    steps:  
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DBUILD_SAMPLES=${{env.BUILD_SAMPLES}} -DBUILD_TESTS=${{env.BUILD_TESTS}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}} --output-on-failure
      
    - name: Archive Logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: testLogs_${{matrix.os}}_${{matrix.build_type}}
        path: |
          ${{github.workspace}}/build/bin/*.log
          ${{github.workspace}}/build/bin/*.err
      
  build_win:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    
    strategy:
      matrix:
        os: [windows-latest]
        build_type: [Release, Debug]
    
    steps:  
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_SYSTEM_VERSION="10.0.18362.0" -DBUILD_SAMPLES=${{env.BUILD_SAMPLES}} -DBUILD_TESTS=${{env.BUILD_TESTS}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}} --output-on-failure
      
    - name: Archive Logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: testLogs_${{matrix.os}}_${{matrix.build_type}}
        path: |
          ${{github.workspace}}/build/bin/*.log
          ${{github.workspace}}/build/bin/*.err
